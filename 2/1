import numpy as np

# Заданные параметры
m = 1
k1 = m
k2 = 2*m

# Определение функций
def f(t, y, v):
    return v

def g(t, y, v):
    return -(k1/m)*y + (k2/m)*np.exp(-t)

# Метод Рунге-Кутты 4-го порядка
def runge_kutta(t0, y0, v0, h, num_steps):
    t_values = [t0]
    y_values = [y0]
    v_values = [v0]

    for _ in range(num_steps):
        t = t_values[-1]
        y = y_values[-1]
        v = v_values[-1]

        k1 = h * f(t, y, v)
        l1 = h * g(t, y, v)
        k2 = h * f(t + 0.5*h, y + 0.5*k1, v + 0.5*l1)
        l2 = h * g(t + 0.5*h, y + 0.5*k1, v + 0.5*l1)
        k3 = h * f(t + 0.5*h, y + 0.5*k2, v + 0.5*l2)
        l3 = h * g(t + 0.5*h, y + 0.5*k2, v + 0.5*l2)
        k4 = h * f(t + h, y + k3, v + l3)
        l4 = h * g(t + h, y + k3, v + l3)

        y_new = y + (k1 + 2*k2 + 2*k3 + k4) / 6
        v_new = v + (l1 + 2*l2 + 2*l3 + l4) / 6
        t_new = t + h

        t_values.append(t_new)
        y_values.append(y_new)
        v_values.append(v_new)

    return t_values, y_values

# Начальные условия
t0 = 0
y0 = 0
v0 = 0

# Параметры численного метода
h = 0.01
num_steps = int(5 / h)

t_values, y_values = runge_kutta(t0, y0, v0, h, num_steps)

# Находим значение у в момент t=5
index_t_5 = int(5 / h)
y_t_5 = y_values[index_t_5]
print(f"Приближенное значение у в момент t=5: {y_t_5}")
